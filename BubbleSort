#include <iostream>

class Node {
public:
    int data;
    Node* next;

    Node(int val) : data(val), next(nullptr) {}
};

class LinkedList {
public:
    Node* head;

    LinkedList() : head(nullptr) {}

    void append(int data) {
        Node* newNode = new Node(data);
        if (!head) {
            head = newNode;
            return;
        }
        Node* last = head;
        while (last->next) {
            last = last->next;
        }
        last->next = newNode;
    }

    void printList() {
        Node* current = head;
        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

void bubbleSort(LinkedList& list) {
    if (!list.head) return;

    bool swapped;
    do {
        swapped = false;
        Node* current = list.head;
        while (current && current->next) {
            if (current->data > current->next->data) {
                std::swap(current->data, current->next->data);
                swapped = true;
            }
            current = current->next;
        }
    } while (swapped);
}

int main() {
    LinkedList ll;
    ll.append(7);
    ll.append(13);
    ll.append(1);
    ll.append(2);

    std::cout << "Lista original: ";
    ll.printList();

    bubbleSort(ll);

    std::cout << "Lista ordenada: ";
    ll.printList();

    return 0;
}
