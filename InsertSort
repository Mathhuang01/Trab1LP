#include <iostream>

class Node {
public:
    int data;
    Node* next;

    Node(int val) : data(val), next(nullptr) {}
};

class LinkedList {
public:
    Node* head;

    LinkedList() : head(nullptr) {}

    void append(int data) {
        Node* newNode = new Node(data);
        if (!head) {
            head = newNode;
            return;
        }
        Node* last = head;
        while (last->next) {
            last = last->next;
        }
        last->next = newNode;
    }

    void insertionSort() {
        if (!head) return;

        Node* sorted = nullptr;
        Node* current = head;

        while (current != nullptr) {
            Node* next = current->next;
            sortedInsert(&sorted, current);
            current = next;
        }

        head = sorted;
    }

    void sortedInsert(Node** sortedHead, Node* newNode) {
        if (*sortedHead == nullptr || (*sortedHead)->data >= newNode->data) {
            newNode->next = *sortedHead;
            *sortedHead = newNode;
        } else {
            Node* current = *sortedHead;
            while (current->next != nullptr && current->next->data < newNode->data) {
                current = current->next;
            }
            newNode->next = current->next;
            current->next = newNode;
        }
    }

    void printList() {
        Node* current = head;
        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    LinkedList list;
    list.append(4);
    list.append(23);
    list.append(11);
    list.append(25);

    std::cout << "Lista original: ";
    list.printList();

    list.insertionSort();

    std::cout << "Lista ordenada por Insertion Sort: ";
    list.printList();

    return 0;
}
